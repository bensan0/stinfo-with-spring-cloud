<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.personal.project.stockservice.mapper.DailyStockInfoMapper">

    <resultMap id="BaseResultMap" type="com.personal.project.stockservice.model.entity.DailyStockInfoDO">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="stockId" column="stock_id" jdbcType="VARCHAR"/>
        <result property="stockName" column="stock_name" jdbcType="VARCHAR"/>
        <result property="market" column="market" jdbcType="VARCHAR"/>
        <result property="date" column="date" jdbcType="BIGINT"/>
        <result property="todayClosingPrice" column="today_closing_price" jdbcType="DECIMAL"/>
        <result property="yesterdayClosingPrice" column="yesterday_closing_price" jdbcType="DECIMAL"/>
        <result property="priceGap" column="price_gap" jdbcType="DECIMAL"/>
        <result property="priceGapPercent" column="price_gap_percent" jdbcType="DECIMAL"/>
        <result property="openingPrice" column="opening_price" jdbcType="DECIMAL"/>
        <result property="highestPrice" column="highest_price" jdbcType="DECIMAL"/>
        <result property="lowestPrice" column="lowest_price" jdbcType="DECIMAL"/>
        <result property="todayTradingVolumePiece" column="today_trading_volume_piece" jdbcType="BIGINT"/>
        <result property="todayTradingVolumeMoney" column="today_trading_volume_money" jdbcType="DECIMAL"/>
        <result property="yesterdayTradingVolumePiece" column="yesterday_trading_volume_piece" jdbcType="BIGINT"/>
        <result property="yesterdayTradingVolumeMoney" column="yesterday_trading_volume_money" jdbcType="DECIMAL"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,stock_id,stock_name,'date',market,today_closing_price,yesterday_closing_price,
        price_gap,price_gap_percent,opening_price,highest_price,lowest_price,
        today_trading_volume_piece,today_trading_volume_money,yesterday_trading_volume_piece,
        yesterday_trading_volume_money
    </sql>

    <select id="query4CalMetrics" parameterType="com.personal.project.stockservice.model.dto.Query4CalDTO" resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.price_gap as priceGap,
            T.price_gap_percent as priceGapPercent,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from (
            select
                tt.*,
                row_number() over (partition by stock_id order by date desc) as 'sequence'
            from (
                select *
                from daily_stock_info s
                where s.date &lt;= #{date} and today_closing_price is not null
                 ) tt
             ) T
        where T.sequence in (1, 5, 10, 20, 60, 120, 240)
    </select>

    <select id="queryInfo4CalDetail" parameterType="com.personal.project.stockservice.model.dto.Query4CalDTO" resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        select
            t.id as id,
            t.stock_id as stockId,
            t.stock_name as stockName,
            t.date as 'date',
            t.price_gap as priceGap,
            t.price_gap_percent as priceGapPercent,
            t.today_closing_price as todayClosingPrice,
            t.yesterday_closing_price as yesterdayClosingPrice,
            t.opening_price as openingPrice,
            t.highest_price as highestPrice,
            t.lowest_price as lowestPrice,
            t.today_trading_volume_piece as todayTradingVolumePiece,
            t.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            t.today_trading_volume_money as todayTradingVolumeMoney,
            t.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from
            daily_stock_info t
        where
            t.date = #{date}
        union
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as 'date',
            T.price_gap_percent as priceGapPercent,
            T.today_closing_price as todayClosingPrice,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from (
                 select
                     tt.*,
                     row_number() over (partition by stock_id order by date desc) as 'sequence'
                 from
                    daily_stock_info tt
                 where
                    tt.date &lt; #{date} and
                    tt.today_closing_price is not null
             ) T
        where T.sequence in (1, 2, 4)
    </select>

    <select id="queryFormer" resultType="com.personal.project.stockservice.model.entity.DailyStockInfoDO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as 'date',
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from (
                 select
                     tt.*,
                     row_number() over (partition by stock_id order by date desc) as sequence
                 from (
                        select *
                        from daily_stock_info s
                        where s.today_closing_price is not null and s.date &lt; #{date}
                      ) tt
             ) T
        where T.sequence = 1
    </select>

    <select id="query4InitYesterdayMetrics"
            resultType="com.personal.project.stockservice.model.dto.StockInfo4InitMetricsDTO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.today_closing_price as todayClosingPrice
        from (
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as 'sequence'
                from(
                        select *
                        from daily_stock_info
                        where today_closing_price is not null
                    ) tt
             ) T
        where T.sequence &lt; 242
    </select>

    <select id="queryInfo4InitYesterdayDetail" resultType="com.personal.project.stockservice.model.dto.StockInfo4InitDetailDTO">
        select
            T.id as id,
            T.stock_id   as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_closing_price as todayClosingPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.sequence as sequence
        from (
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as sequence
                from (
                        select *
                        from daily_stock_info
                        where today_closing_price is not null
                     ) tt
             ) T
        where T.sequence &lt; 7;
    </select>

    <select id="query4InitTodayMetrics"
            resultType="com.personal.project.stockservice.model.dto.StockInfo4InitMetricsDTO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.today_closing_price as todayClosingPrice
        from (
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as 'sequence'
                from(
                        select *
                        from daily_stock_info
                        where today_closing_price is not null
                    ) tt
            ) T
        where T.sequence in (1, 5, 10, 20, 60, 120, 240);
    </select>

    <select id="query4InitTodayDetail" resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.price_gap as priceGap,
            T.price_gap_percent as priceGapPercent,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from (
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as 'sequence'
                from(
                        select *
                        from daily_stock_info
                        where today_closing_price is not null
                    ) tt
                ) T
        where T.sequence in (1, 2, 3, 5);
    </select>
    <select id="query4RealTimeMetrics"
            resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        SELECT
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as date,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.price_gap as priceGap,
            T.price_gap_percent as priceGapPercent,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        FROM
            daily_stock_info T
        WHERE
            T.date = #{date}
        UNION
        SELECT
            T2.id as id,
            T2.stock_id as stockId,
            T2.stock_name as stockName,
            T2.date as date,
            T2.today_closing_price as todayClosingPrice,
            T2.yesterday_closing_price as yesterdayClosingPrice,
            T2.price_gap as priceGap,
            T2.price_gap_percent as priceGapPercent,
            T2.opening_price as openingPrice,
            T2.highest_price as highestPrice,
            T2.lowest_price as lowestPrice,
            T2.today_trading_volume_piece as todayTradingVolumePiece,
            T2.today_trading_volume_money as todayTradingVolumeMoney,
            T2.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T2.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        FROM(
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as sequence
                from
                    daily_stock_info tt
                where
                    tt.date &lt; #{date} and
                    tt.stock_id in (select stock_id from daily_stock_info s WHERE s.date = #{date}) and
                    tt.today_closing_price IS NOT NULL
             )T2
        WHERE
            T2.sequence in (4, 9, 19, 59, 119, 239)
    </select>

    <select id="query4RealTimeDetail"
            resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        select
            T.id as id,
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as 'date',
            T.price_gap as priceGap,
            T.price_gap_percent as priceGapPercent,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from
            daily_stock_info T
        where
            T.date = #{date}
        union
        select
            T2.id as id,
            T2.stock_id as stockId,
            T2.stock_name as stockName,
            T2.date as 'date',
            T2.price_gap_percent as priceGapPercent,
            T2.today_closing_price as todayClosingPrice,
            T2.today_closing_price as todayClosingPrice,
            T2.yesterday_closing_price as yesterdayClosingPrice,
            T2.opening_price as openingPrice,
            T2.highest_price as highestPrice,
            T2.lowest_price as lowestPrice,
            T2.today_trading_volume_piece as todayTradingVolumePiece,
            T2.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T2.today_trading_volume_money as todayTradingVolumeMoney,
            T2.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from (
            select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as 'sequence'
            from
                    daily_stock_info tt
            where
                    tt.date &lt; #{date} and
                    tt.today_closing_price is not null and
                    tt.stock_id in (select stock_id from daily_stock_info s where s.date = #{date})
        ) T2
        where T2.sequence in (1, 2, 4)
    </select>
    <select id="queryLatest" resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">


    </select>
    <select id="queryByStockId" resultType="com.personal.project.stockservice.model.dto.DailyStockInfoDTO">
        select
            T.stock_id as stockId,
            T.stock_name as stockName,
            T.date as 'date',
            T.market as market,
            T.price_gap_percent as priceGapPercent,
            T.today_closing_price as todayClosingPrice,
            T.today_closing_price as todayClosingPrice,
            T.yesterday_closing_price as yesterdayClosingPrice,
            T.opening_price as openingPrice,
            T.highest_price as highestPrice,
            T.lowest_price as lowestPrice,
            T.today_trading_volume_piece as todayTradingVolumePiece,
            T.yesterday_trading_volume_piece as yesterdayTradingVolumePiece,
            T.today_trading_volume_money as todayTradingVolumeMoney,
            T.yesterday_trading_volume_money as yesterdayTradingVolumeMoney
        from
            daily_stock_info T
        where
            T.stock_id = #{stockId}
        order by
            T.date desc
    </select>
    <select id="queryByConditions" resultType="com.personal.project.stockservice.model.dto.CompleteStockDTO">
        select
            t1.stock_id as stockId,
            t1.stock_name as stockName,
            t1.date as date,
            t1.today_closing_price as todayClosingPrice,
            t1.yesterday_closing_price as yesterdayClosingPrice,
            t1.price_gap as priceGap,
            t1.price_gap_percent as priceGapPercent,
            t1.today_trading_volume_piece as todayTradingVolumePiece,
            t1.today_trading_volume_money as todayTradingVolumeMoney,
            t2.upper_shadow as upperShadow,
            t2.real_body as realBody,
            t2.lower_shadow as lowerShadow,
            t2.tags,
            t3.ma_5 as ma5,
            t3.ma_10 as ma10,
            t3.ma_20 as ma20
        from
            (
                select
                    tt.*,
                    row_number() over (partition by stock_id order by date desc) as sequence
                from
                    daily_stock_info tt
                where
                    tt.today_closing_price is not null
            ) t1
        left join
            daily_stock_info_detail t2
        on
            t1.stock_id = t2.stock_id and
            t1.date = t2.date
        left join
            daily_stock_metrics t3
        on
            t1.date = t3.date and
            t1.stock_id = t3.stock_id
        <where>
            t1.sequence = 1
            <if test = "tradingVolumePieceStart != null">
                and t1.today_trading_volume_piece &gt;= #{tradingVolumePieceStart}
            </if>
            <if test="tradingVolumePieceEnd != null">
                and t1.today_trading_volume_piece &lt;= #{tradingVolumePieceEnd}
            </if>
            <if test="conPriceDays != null and conPriceStatus != null">
                and JSON_CONTAINS(
                                    t2.tags->'$.consecutivePrice',
                                    JSON_ARRAY(#{conPriceDays}, #{conPriceStatus})
                                 )
            </if>
            <if test="conVolDays != null and tradingVolumeStatus != null">
                and JSON_CONTAINS(
                                    t2.tags->'$.consecutiveTradingVolume',
                                    JSON_ARRAY(#{conVolDays}, #{tradingVolumeStatus})
                                 )
            </if>
            <if test="conAmountDays != null and tradingAmountStatus != null">
                and JSON_CONTAINS(
                                    t2.tags->'$.consecutiveTradingAmount',
                                    JSON_ARRAY(#{conVolDays}, #{tradingVolumeStatus})
                                 )
            </if>
            <if test="extraTags != null and extraTags.size() > 0">
                and JSON_CONTAINS(
                                    t2.tags->'$.extraTags',
                                    JSON_ARRAY(
                                                <foreach collection="extraTags" index="index" item="item" open="" separator="," close="">
                                                        #{item}
                                                </foreach>
                                                )
                                 )
            </if>
        </where>

    </select>
</mapper>